---
title: "HW Class 6: R Functions"
author: "Xiaoxuan Teng (PID: A69028742)"
format: pdf
date: 01/29/2024
---

# Section 1: Improving analysis code by writing functions

### A
```{r}
# (A. Can you improve this analysis code?
# Also consider copy and paste error in df$b and df$d
df <- data.frame(a=1:10, b=seq(200,400,length=10),c=11:20,d=NA)
df$a <- (df$a - min(df$a)) / (max(df$a) - min(df$a))
df$b <- (df$b - min(df$b)) / (max(df$b) - min(df$b))
df$c <- (df$c - min(df$c)) / (max(df$c) - min(df$c))
df$d <- (df$d - min(df$d)) / (max(df$d) - min(df$d))
```

```{r}
# Write function to perform normalization
Min_Max_Normalization <- function(x){
  (x - min(x))/(max(x) - min(x)) # min_max_normalization=(value-min)/(max-min)
}
```

```{r}
# Apply normalization function to each column
apply(df, 2, Min_Max_Normalization)
```

### B
```{r}
# install.packages("bio3d")
# Can you improve this analysis code?
library(bio3d)
s1 <- read.pdb("4AKE") # kinase with drug
s2 <- read.pdb("1AKE") # kinase no drug
s3 <- read.pdb("1E4Y") # kinase with drug
s1.chainA <- trim.pdb(s1, chain="A", elety="CA")
s2.chainA <- trim.pdb(s2, chain="A", elety="CA")
s3.chainA <- trim.pdb(s3, chain="A", elety="CA")
s1.b <- s1.chainA$atom$b
s2.b <- s2.chainA$atom$b
s3.b <- s3.chainA$atom$b
plotb3(s1.b, sse=s1.chainA, typ="l", ylab="Bfactor")
plotb3(s2.b, sse=s2.chainA, typ="l", ylab="Bfactor")
plotb3(s3.b, sse=s3.chainA, typ="l", ylab="Bfactor")
```

```{r}
# Write function to read, trim PDB file, and plot B factor
# Arguments: PDB ID, chian identifier, and atom type
plot_pdb <- function(pdbcode, chain, elety){
  # there are more than 1 pdb ID, so will run this function in loop
  for (x in pdbcode){
    # read a PDB file by read.pdb()
    s <- read.pdb(x) 
    # create a new PDB object based on our selection of backbone atoms by trim.pdb()
    s.chain <- trim.pdb(s, chain = chain, elety = elety)
    # access the b-factor column
    s.b <- s.chain$atom$b
    # plot b-factors with sse annotation added to linear plot
    plotb3(s.b, sse = s.chain, type = "l", ylab = "Bfactor")
  }
}
```

```{r}
# Inputs: pdb code, chian identifier, and atom type
pdbcode <- c("4AKE", "1AKE", "1E4Y")
chain <- "A"
elety <- "CA"

# The output of the function are plots of B-factor vs chain A residue from our list of proteins
plot_pdb(pdbcode, chain, elety)
```

> **Q1.** What type of object is returned from the read.pdb() function?

### Answer: The 'read.pdb()' function returns a list of class "pdb" with several components. This includes atom, xyz, seqres, helix, sheet, calpha, remark, and call.

```{r}
str(s1)
```

> **Q2.** What does the trim.pdb() function do?

### Answer: 'trim.pdb()' function trim a pdb object to a subset of atoms and produce a new smaller PDB object based on our selection of atoms. In our preview code, we used 'trim.pdb()' function to extract only the alpha carbon atoms "CA" of chain A from our protein of interest.

> **Q3.** What input parameter would turn off the marginal black and grey rectangles in the
plots and what do they represent in this case?

### Answer: set "sse = NULL" parameter would turn off the marginal rectangles. The "sse" parameter provides the information about the protein secondary structure, with black marginal rectangles represent alpha helix and gery indicates beta strand regions.
```{r}
s1 <- read.pdb("4AKE") # kinase with drug
s1.chainA <- trim.pdb(s1, chain="A", elety="CA")
s1.b <- s1.chainA$atom$b
plotb3(s1.b, sse=NULL, typ="l", ylab="Bfactor")
```

> **Q4.** What would be a better plot to compare across the different proteins?

### Answer: A better plot would be a overlay line plot with all three proteins plotted in the same graph.
```{r}
plotb3(s1.b, typ="l", ylab="Bfactor", col = "orange", ylim = range(c(s1.b, s2.b, s3.b)))
lines(s2.b, typ = "l", col = "blue")
lines(s3.b, typ = "l", col = "red")
legend("topright", legend = c("4AKE", "1AKE", "1E4Y"), col = c("orange", "blue", "red"), lty = 1)
```



> **Q5.** Which proteins are more similar to each other in their B-factor trends. How could
you quantify this? HINT: try the rbind(), dist() and hclust() functions together with a
resulting dendrogram plot. Look up the documentation to see what each of these
functions does.

### Answer: 'rbind()' function combines the B-factor data from different proteins by rows. 'dist()' function computes and returns the distance matrix based on their B-factors. 'hclust()' function performs hierarchical cluster analysis on the dissimilarity structures produced by dist().

### From the cluster dendrogram, we can tell that protein **s2 (1AKE) and s3 (1E4Y)** are more similar to each other in terms of their B-factor trends as they have been grouped closer in the dendrogram.

### The heights of which two objects are joined together represent the distance between two clusters. Lower heights mean more similarity. This could be quantified by the 'dist()' function, that generates the distance between any two samples.
```{r}
distance_matrix <- dist(rbind(s1.b, s2.b, s3.b))
distance_matrix
hc <- hclust(distance_matrix)
plot(hc)
```



> **Q6.** How would you generalize the original code above to work with any set of input
protein structures?

### Answer: I need to define a function with input arguments of a list of pdb codes, chian identifier, atom type, and/or factor. Then process each one in loop.
```{r}
# Write function to read, trim PDB file, and plot B factor
# Arguments: PDB ID, chian identifier, and atom type
plot_pdb <- function(pdbcode, chain, elety, factor){
  # there are more than 1 pdb ID, so will run this function in loop
  for (x in pdbcode){
    # read a PDB file by read.pdb()
    s <- read.pdb(x) 
    # create a new PDB object based on our selection of backbone atoms by trim.pdb()
    s.chain <- trim.pdb(s, chain = chain, elety = elety)
    # access the b-factor column
    s.atom <- s.chain$atom
    s.b <- s.atom[,factor]
    # plot b-factors with sse annotation added to linear plot
    plotb3(s.b, sse = s.chain, type = "l", ylab = "Bfactor")
  }
}

# Inputs: pdb code, chian identifier, and atom type
pdbcode <- c("4AKE", "1AKE", "1E4Y")
chain <- "A"
elety <- "CA"
factor <- "b"

# The output of the function are plots of B-factor vs chain A residue from our list of proteins
plot_pdb(pdbcode, chain, elety, factor)
```



